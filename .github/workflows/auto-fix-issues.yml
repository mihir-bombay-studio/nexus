name: Auto-Fix Issues with LLM

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  check_debounce:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.wait.outputs.should_run }}
    steps:
      - name: Wait for other runs to complete
        id: wait
        run: |
          # Wait for 30 seconds to allow any other rapid updates to come in
          sleep 30
          echo "should_run=true" >> $GITHUB_OUTPUT

  process_issue:
    needs: check_debounce
    if: needs.check_debounce.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue has 'autorun-oneshot' label and is not a PR
        id: check_issue
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.issue.labels.map(label => label.name);
            const hasLabel = labels.includes('autorun-oneshot');
            const isPR = !!context.payload.issue.pull_request;
            core.setOutput('hasLabel', String(hasLabel));
            core.setOutput('isPR', String(isPR));

      - name: Exit if conditions not met
        if: steps.check_issue.outputs.hasLabel != 'true' || steps.check_issue.outputs.isPR == 'true'
        run: exit 0

      - name: Checkout Repository
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0
          persist-credentials: false
          clean: false

      - name: Set up PAT for pushing
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Prepare Branch
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        run: |
          set -xe
          branch_name="fix/issue-${{ github.event.issue.number }}"
          git fetch --all
          if git ls-remote --exit-code --heads origin "$branch_name"; then
            git checkout "$branch_name"
            git pull origin "$branch_name"
          else
            git checkout -b "$branch_name" origin/${{ github.event.repository.default_branch }}
          fi
          git merge --no-edit origin/${{ github.event.repository.default_branch }}

      - name: Set up Python
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        run: |
          pip install --upgrade openai PyGithub requests
          pip install git+https://github.com/openai/swarm.git

      - name: Run Swarm Script
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          REPO_NAME: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          python scripts/generate_fix.py

      - name: Check File Changes and Git Status
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        run: |
          echo "After generate_fix.py:"
          ls -la
          echo "Content of modified files (if any):"
          git diff --name-only --cached | xargs -I{} sh -c 'echo "--- {} ---"; cat {}'
          git status
          git diff

      - name: Commit and Push Changes
        id: commit_and_push
        if: steps.check_issue.outputs.hasLabel == 'true' && steps.check_issue.outputs.isPR != 'true'
        run: |
          set -xe
          branch_name="fix/issue-${{ github.event.issue.number }}"
          git add -A
          git status
          # Check for changes
          if git diff-index --quiet HEAD; then
            echo "No changes detected, skipping commit and push."
            echo "changes_made=false" >> $GITHUB_OUTPUT
            exit 0
          else
            git commit -m "Auto-fix for issue #${{ github.event.issue.number }}"
            git push --set-upstream origin "$branch_name"
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update Pull Request
        if: steps.commit_and_push.outputs.changes_made == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const branchName = `fix/issue-${issueNumber}`;
            const prTitle = `Auto-fix for issue #${issueNumber}`;
            const prBody = `This pull request was automatically generated to address issue #${issueNumber}.`;
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open',
            });
            if (pulls.length > 0) {
              console.log(`Pull request already exists: ${pulls[0].html_url}`);
            } else {
              const response = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                head: branchName,
                base: context.payload.repository.default_branch,
                body: prBody,
              });
              console.log(`Pull request created: ${response.data.html_url}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
